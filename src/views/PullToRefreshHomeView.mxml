<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:twittersearchadobe="services.twittersearchadobe.*"
        title="Tweets about France" viewActivate="view1_viewActivateHandler(event)"
        currentState="normal" creationComplete="onCComplete(event)"
        backgroundAlpha="0" xmlns:mx="library://ns.adobe.com/flex/mx">
  <fx:Script>
    <![CDATA[
      import mx.events.FlexEvent;
      import mx.events.TouchInteractionEvent;
      import mx.rpc.events.ResultEvent;
      
      import spark.components.Scroller;
      import spark.events.ViewNavigatorEvent;
      /**
      * Seuil à partir duquel on va demander un chargement
      */
      private static const SCROLL_POSITION_TRIGGER_REFRESH:int = -80;
      /**
      * Mémoire sur la position du scroll pour éviter de faire trop de modifications on enter frames
      */
      private var _previousVScrollValue:Number = Number.NEGATIVE_INFINITY;
      /**
      * Flag pour éviter d'ajouter plusieurs fois les event listener
      */
      private var _enterFrameFlag:Boolean = false;
      /**
      * Position en Y du group pull to refresh pour qu'il suive le mouvement de la liste
      */
      [Bindable]
      private var _loadGroupY:Number = 0;
      
      
      /////////////////////////////////////////////////////////////////////////
      // TWITTER SERVICE
      protected function operation1(q:String):void
      {
        Operation1Result.token = twitterSearchAdobe.Operation1(q);
      }
      
      protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
      {
        operation1('france');
      }
      
      protected function twitterSearchAdobe_resultHandler(event:ResultEvent):void
      {
        tweets.removeAll();
        tweets = event.result.results;
        currentState = currentState == "loading" ? "normal" : currentState;
      }
      
      /////////////////////////////////////////////////////////////////////////
      // PULL TO REFRESH BEHAVIOUR
      
      protected function onCComplete(event:FlexEvent):void{
        var scroller:Scroller = list.scroller;
        scroller.addEventListener(TouchInteractionEvent.TOUCH_INTERACTION_START, onChangeStart);
      }
      
      protected function onChangeStart(event:TouchInteractionEvent):void{
        if (_enterFrameFlag){
          return;
        }
        list.addEventListener(MouseEvent.MOUSE_UP, onMouseStop);
        list.addEventListener(MouseEvent.ROLL_OUT, onMouseStop);
        list.addEventListener(Event.ENTER_FRAME, onEnterFrame);
        _enterFrameFlag = true;
      }
      
      
      protected function onEnterFrame(event:Event):void{ 
        var vScroll:Number = list.scroller.verticalScrollBar.value;
        if (_previousVScrollValue == vScroll){
          return;
        }
        _previousVScrollValue = vScroll;
        if(vScroll < -20){
          currentState = "pulled";
          if(vScroll < SCROLL_POSITION_TRIGGER_REFRESH){
            if(arrowImage.rotation == 0)  {
              arrowImage.rotation = 180;
            }
            loadText.text = "Release to refesh...";
            
          }else{
            if(arrowImage.rotation == 180)  {
              arrowImage.rotation = 0;
            }
            loadText.text = "Pull down to refresh";
          }
          _loadGroupY = -vScroll - loadingGroup.height;
        }else{
          _loadGroupY = 0;
          currentState = "normal";
        }
      }

      protected function onMouseStop(event:MouseEvent):void{
        var vScroll:Number = list.scroller.verticalScrollBar.value;
        if (currentState == "pulled" && vScroll < SCROLL_POSITION_TRIGGER_REFRESH){
          operation1('france');
          currentState = "loading";
          loadGroup.includeInLayout = true;
        } else {
          currentState = "normal";
        }
        _loadGroupY = 0;
        if (_enterFrameFlag){
          list.removeEventListener(MouseEvent.MOUSE_UP, onMouseStop);
          list.removeEventListener(MouseEvent.ROLL_OUT, onMouseStop);
          list.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
          _enterFrameFlag = false;
        }
      }
      
    ]]>
  </fx:Script>
  
  <fx:Declarations>
    <s:CallResponder id="Operation1Result"/>
    <twittersearchadobe:TwitterSearchAdobe id="twitterSearchAdobe" result="twitterSearchAdobe_resultHandler(event)"/>
    <s:ArrayCollection id="tweets"/>
    <s:Fade id='fadeIn' target="{loadingGroup}" duration="500" alphaFrom="0" alphaTo="1"/>
  </fx:Declarations>
  <s:states>
    <s:State name="normal" />
    <s:State name="loading" />
    <s:State name="pulled" />
  </s:states>
  <s:transitions>
    <s:Transition fromState="loading" toState="normal">
      <s:Parallel effectEnd="loadGroup.includeInLayout = false;" duration="500">
        <s:Fade id="fadeInLG" target="{loadGroup}" alphaFrom="1" alphaTo="0"/>
        <s:Resize target="{loadGroup}" heightTo="0">
          <s:easer>
            <s:Sine />
          </s:easer>
        </s:Resize>
      </s:Parallel>
    </s:Transition>
  </s:transitions>
    <s:VGroup width="100%" height="100%">
      <s:HGroup id="loadGroup" width="100%" height="50"
                visible.loading="true" visible.normal="false" visible.pulled="false"
                includeInLayout="false"
               verticalAlign="middle" horizontalAlign="center">
          <s:BusyIndicator width="30" height="30"/>
          <s:Label id="loadanim" color="0x444444" text="Loading new tweets..." />
      </s:HGroup>
      <s:List id="list" dataProvider="{tweets}" 
              width="100%" height="100%"
              >
        <s:itemRenderer>
          <fx:Component>
            <s:IconItemRenderer labelField="text" messageField="from_user" iconField="profile_image_url" iconWidth="48" iconHeight="48" >
            </s:IconItemRenderer>
          </fx:Component>
        </s:itemRenderer>
      </s:List>
    </s:VGroup>
    <s:HGroup id="loadingGroup" horizontalAlign="center" verticalAlign="middle" width="100%" visible.pulled="true" 
              visible.normal="false" visible.loading="false" includeInLayout.pulled="true" 
              includeInLayout.normal="false" includeInLayout.loading="false" height="50"
              y="{_loadGroupY}"
              >
      <s:Image id="arrowImage"  source="@Embed('Arrow-double-up-48.png')"/>
      <s:Label text="Pull down to refresh"  id="loadText"/>
    </s:HGroup>
</s:View>